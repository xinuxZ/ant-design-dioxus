#![allow(non_snake_case)]
//!
//! Â±ïÁ§∫ Notification ÁªÑ‰ª∂ÁöÑÂêÑÁßçÁî®Ê≥ïÂíåÊ†∑Âºè

use crate::common::*;
use ant_design_dioxus::prelude::*;
use dioxus::prelude::*;

/// Notification ÁªÑ‰ª∂ÊºîÁ§∫
#[component]
pub fn NotificationDemo() -> Element {
    rsx! {
        div {
            class: "component-showcase",

            h1 {
                style: "margin: 0 0 16px 0; color: #262626; font-size: 28px;",
                "Notification ÈÄöÁü•ÊèêÈÜíÊ°Ü"
            }

            p {
                style: "margin: 0 0 24px 0; color: #666; font-size: 14px;",
                "ÂÖ®Â±ÄÂ±ïÁ§∫ÈÄöÁü•ÊèêÈÜí‰ø°ÊÅØ„ÄÇ"
            }

            // Âü∫Á°ÄÁî®Ê≥ï
            DemoSection {
                title: "Âü∫Á°ÄÁî®Ê≥ï",
                description: "ÊúÄÁÆÄÂçïÁöÑÁî®Ê≥ïÔºå4.5 ÁßíÂêéËá™Âä®ÂÖ≥Èó≠„ÄÇ",

                div {
                    style: "display: flex; gap: 8px; flex-wrap: wrap;",

                    Button {
                        button_type: ButtonType::Primary,
                        onclick: move |_| {
                            let notification_item = NotificationItem::new(
                                NotificationType::Info,
                                "Notification Title",
                                Some("This is the content of the notification. This is the content of the notification. This is the content of the notification.")
                            );
                            notification::open(notification_item);
                        },
                        "Open the notification box"
                    }
                }
            }

            // Â∏¶ÊúâÂõæÊ†áÁöÑÈÄöÁü•ÊèêÈÜíÊ°Ü
            DemoSection {
                title: "Â∏¶ÊúâÂõæÊ†áÁöÑÈÄöÁü•ÊèêÈÜíÊ°Ü",
                description: "ÈÄöÁü•ÊèêÈÜíÊ°ÜÂ∑¶‰æßÊúâÂõæÊ†á„ÄÇ",

                div {
                    style: "display: flex; gap: 8px; flex-wrap: wrap;",

                    Button {
                        onclick: move |_| {
                            notification::success(
                                "Notification Title",
                                "This is the content of the notification. This is the content of the notification. This is the content of the notification."
                            );
                        },
                        "Success"
                    }

                    Button {
                        onclick: move |_| {
                            notification::info(
                                "Notification Title",
                                "This is the content of the notification. This is the content of the notification. This is the content of the notification."
                            );
                        },
                        "Info"
                    }

                    Button {
                        onclick: move |_| {
                            notification::warning(
                                "Notification Title",
                                "This is the content of the notification. This is the content of the notification. This is the content of the notification."
                            );
                        },
                        "Warning"
                    }

                    Button {
                        onclick: move |_| {
                            notification::error(
                                "Notification Title",
                                "This is the content of the notification. This is the content of the notification. This is the content of the notification."
                            );
                        },
                        "Error"
                    }
                }
            }

            // Ëá™ÂÆö‰πâÊåâÈíÆ
            DemoSection {
                title: "Ëá™ÂÆö‰πâÊåâÈíÆ",
                description: "Ëá™ÂÆö‰πâÂÖ≥Èó≠ÊåâÈíÆÁöÑÊ†∑ÂºèÂíåÊñáÂ≠ó„ÄÇ",

                div {
                    style: "display: flex; gap: 8px; flex-wrap: wrap;",

                    Button {
                        button_type: ButtonType::Primary,
                        onclick: move |_| {
                            let notification_item = NotificationItem::new(
                                NotificationType::Info,
                                "Notification Title",
                                Some("A function will be be called after the notification is closed (automatically after the 'duration' time of manually).")
                            );
                            notification::open(notification_item);
                        },
                        "Open the notification box"
                    }
                }
            }

            // Ëá™ÂÆö‰πâÂõæÊ†á
            DemoSection {
                title: "Ëá™ÂÆö‰πâÂõæÊ†á",
                description: "ÂõæÊ†áÂèØ‰ª•Ë¢´Ëá™ÂÆö‰πâ„ÄÇ",

                div {
                    style: "display: flex; gap: 8px; flex-wrap: wrap;",

                    Button {
                        button_type: ButtonType::Primary,
                        onclick: move |_| {
                            let notification_item = NotificationItem::new(
                                NotificationType::Info,
                                "Notification Title",
                                Some("This is the content of the notification. This is the content of the notification. This is the content of the notification.")
                            ).with_icon("üòä");
                            notification::open(notification_item);
                        },
                        "Open the notification box"
                    }
                }
            }

            // Ëá™ÂÆö‰πâÊ†∑Âºè
            DemoSection {
                title: "Ëá™ÂÆö‰πâÊ†∑Âºè",
                description: "‰ΩøÁî® style Âíå className Êù•ÂÆö‰πâÊ†∑Âºè„ÄÇ",

                div {
                    style: "display: flex; gap: 8px; flex-wrap: wrap;",

                    Button {
                        button_type: ButtonType::Primary,
                        onclick: move |_| {
                            let notification_item = NotificationItem::new(
                                NotificationType::Info,
                                "Notification Title",
                                Some("This is the content of the notification. This is the content of the notification. This is the content of the notification.")
                            ).with_class_name("custom-class")
                             .with_style("width: 600px; margin-left: 335px - 600px;");
                            notification::open(notification_item);
                        },
                        "Open the notification box"
                    }
                }
            }

            // ‰ΩçÁΩÆ
            DemoSection {
                title: "‰ΩçÁΩÆ",
                description: "ÂèØ‰ª•ËÆæÁΩÆÈÄöÁü•‰ªéÂè≥‰∏äËßí„ÄÅÂè≥‰∏ãËßí„ÄÅÂ∑¶‰∏ãËßí„ÄÅÂ∑¶‰∏äËßíÂºπÂá∫„ÄÇ",

                div {
                    style: "display: flex; gap: 8px; flex-wrap: wrap;",

                    Button {
                        button_type: ButtonType::Primary,
                        onclick: move |_| {
                            notification::config(NotificationConfig {
                                placement: NotificationPlacement::TopLeft,
                                ..Default::default()
                            });
                            let notification_item = NotificationItem::new(
                                NotificationType::Info,
                                "Notification Title",
                                Some("This is the content of the notification. This is the content of the notification. This is the content of the notification.")
                            );
                            notification::open(notification_item);
                        },
                        "topLeft"
                    }

                    Button {
                        button_type: ButtonType::Primary,
                        onclick: move |_| {
                            notification::config(NotificationConfig {
                                placement: NotificationPlacement::TopRight,
                                ..Default::default()
                            });
                            let notification_item = NotificationItem::new(
                                NotificationType::Info,
                                "Notification Title",
                                Some("This is the content of the notification.")
                            );
                            notification::open(notification_item);
                        },
                        "topRight"
                    }

                    Button {
                        button_type: ButtonType::Primary,
                        onclick: move |_| {
                            notification::config(NotificationConfig {
                                placement: NotificationPlacement::BottomLeft,
                                ..Default::default()
                            });
                            let notification_item = NotificationItem::new(
                                NotificationType::Info,
                                "Notification Title",
                                Some("This is the content of the notification.")
                            );
                            notification::open(notification_item);
                        },
                        "bottomLeft"
                    }

                    Button {
                        button_type: ButtonType::Primary,
                        onclick: move |_| {
                            notification::config(NotificationConfig {
                                placement: NotificationPlacement::BottomRight,
                                ..Default::default()
                            });
                            let notification_item = NotificationItem::new(
                                NotificationType::Info,
                                "Notification Title",
                                Some("This is the content of the notification.")
                            );
                            notification::open(notification_item);
                        },
                        "bottomRight"
                    }
                }
            }

            // API ÊñáÊ°£
            ApiDocumentation {
                component_name: "Notification",
                props: vec![
                    // NotificationItem Â±ûÊÄß
                    PropDoc {
                        name: "title".to_string(),
                        prop_type: "&str".to_string(),
                        default: "-".to_string(),
                        description: "ÈÄöÁü•ÊèêÈÜíÊ†áÈ¢òÔºåÂøÖÈÄâ".to_string(),
                    },
                    PropDoc {
                        name: "description".to_string(),
                        prop_type: "Option<&str>".to_string(),
                        default: "None".to_string(),
                        description: "ÈÄöÁü•ÊèêÈÜíÂÜÖÂÆπÔºåÂèØÈÄâ".to_string(),
                    },
                    PropDoc {
                        name: "notification_type".to_string(),
                        prop_type: "NotificationType".to_string(),
                        default: "NotificationType::Info".to_string(),
                        description: "ÈÄöÁü•Á±ªÂûãÔºåÂèØÈÄâÂÄºÔºöInfo„ÄÅSuccess„ÄÅWarning„ÄÅError".to_string(),
                    },
                    PropDoc {
                        name: "duration".to_string(),
                        prop_type: "Option<f64>".to_string(),
                        default: "Some(4.5)".to_string(),
                        description: "ÈªòËÆ§ 4.5 ÁßíÂêéËá™Âä®ÂÖ≥Èó≠ÔºåÈÖçÁΩÆ‰∏∫ None Âàô‰∏çËá™Âä®ÂÖ≥Èó≠".to_string(),
                    },
                    PropDoc {
                        name: "icon".to_string(),
                        prop_type: "Option<&str>".to_string(),
                        default: "None".to_string(),
                        description: "Ëá™ÂÆö‰πâÂõæÊ†á".to_string(),
                    },
                    PropDoc {
                        name: "class_name".to_string(),
                        prop_type: "Option<&str>".to_string(),
                        default: "None".to_string(),
                        description: "Ëá™ÂÆö‰πâ CSS class".to_string(),
                    },
                    PropDoc {
                        name: "style".to_string(),
                        prop_type: "Option<&str>".to_string(),
                        default: "None".to_string(),
                        description: "Ëá™ÂÆö‰πâÂÜÖËÅîÊ†∑Âºè".to_string(),
                    },
                    // NotificationConfig Â±ûÊÄß
                    PropDoc {
                        name: "placement".to_string(),
                        prop_type: "NotificationPlacement".to_string(),
                        default: "NotificationPlacement::TopRight".to_string(),
                        description: "ÂºπÂá∫‰ΩçÁΩÆÔºåÂèØÈÄâÂÄºÔºöTopLeft„ÄÅTopRight„ÄÅBottomLeft„ÄÅBottomRight".to_string(),
                    },
                    PropDoc {
                        name: "top".to_string(),
                        prop_type: "Option<i32>".to_string(),
                        default: "None".to_string(),
                        description: "Ê∂àÊÅØ‰ªéÈ°∂ÈÉ®ÂºπÂá∫Êó∂ÔºåË∑ùÁ¶ªÈ°∂ÈÉ®ÁöÑ‰ΩçÁΩÆÔºåÂçï‰ΩçÂÉèÁ¥†".to_string(),
                    },
                    PropDoc {
                        name: "bottom".to_string(),
                        prop_type: "Option<i32>".to_string(),
                        default: "None".to_string(),
                        description: "Ê∂àÊÅØ‰ªéÂ∫ïÈÉ®ÂºπÂá∫Êó∂ÔºåË∑ùÁ¶ªÂ∫ïÈÉ®ÁöÑ‰ΩçÁΩÆÔºåÂçï‰ΩçÂÉèÁ¥†".to_string(),
                    },
                    PropDoc {
                        name: "max_count".to_string(),
                        prop_type: "Option<usize>".to_string(),
                        default: "None".to_string(),
                        description: "ÊúÄÂ§ßÊòæÁ§∫Êï∞ÔºåË∂ÖËøáÈôêÂà∂Êó∂ÔºåÊúÄÊó©ÁöÑÊ∂àÊÅØ‰ºöË¢´Ëá™Âä®ÂÖ≥Èó≠".to_string(),
                    },
                    PropDoc {
                        name: "rtl".to_string(),
                        prop_type: "Option<bool>".to_string(),
                        default: "None".to_string(),
                        description: "ÊòØÂê¶ÂºÄÂêØ RTL Ê®°Âºè".to_string(),
                    },
                    PropDoc {
                        name: "stack".to_string(),
                        prop_type: "Option<bool>".to_string(),
                        default: "None".to_string(),
                        description: "ÊòØÂê¶Â†ÜÂè†ÊòæÁ§∫".to_string(),
                    },
                ]
            }
        }
    }
}
