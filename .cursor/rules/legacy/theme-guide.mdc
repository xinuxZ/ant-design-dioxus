---
description:
globs:
alwaysApply: false
---
# 主题和样式指南

## 主题系统

### 主题变量
- 颜色系统
  - 主色
  - 功能色（成功、警告、错误）
  - 中性色
- 字体系统
  - 字体族
  - 字号
  - 行高
- 间距系统
  - 内边距
  - 外边距
  - 间隔
- 圆角
- 阴影
- 动画

### 使用方法
```rust
use crate::theme::{Theme, useTheme};

pub fn Component(cx: Scope) -> Element {
    let theme = use_theme(cx);

    render! {
        div {
            color: "{theme.colors.primary}",
            // 其他样式
        }
    }
}
```

## 样式编写规范

### CSS in Rust
- 使用 css-in-rust 编写样式
- 遵循组件级样式隔离
- 支持样式覆盖
- 支持响应式设计

### 最佳实践
- 优先使用主题变量
- 保持样式的可维护性
- 避免深层次选择器
- 使用语义化的类名

### 响应式设计
- 使用断点系统
- 移动优先原则
- 灵活的布局系统
- 适配不同设备

### 性能优化
- 避免样式重复
- 合理使用选择器
- 优化样式计算
- 减少样式重绘

## 主题定制
- 通过 ConfigProvider 配置主题
- 支持动态切换主题
- 自定义主题变量
- 扩展默认主题
