---
description: 测试规范和质量保证，确保代码的可靠性和稳定性
globs:
  - 'src/**/*.rs'
  - 'tests/**/*.rs'
  - 'examples/**/*.rs'
alwaysApply: true
priority: high
---

# 测试规范

## 目标
建立完整的测试体系，确保组件库的质量和稳定性，提供可靠的用户体验。

## 上下文
- 基于 Rust 测试框架和 Dioxus 测试工具
- 支持单元测试、集成测试和端到端测试
- 适配 WebAssembly 目标的测试需求
- 集成持续集成 (CI) 流程

## 规则

### 测试覆盖率要求
- 核心组件测试覆盖率 ≥ 90%
- 工具函数测试覆盖率 ≥ 95%
- 主题系统测试覆盖率 ≥ 85%
- 关键业务逻辑测试覆盖率 = 100%

### 单元测试规范
- 每个公共函数都必须有对应的单元测试
- 测试函数命名使用 `test_` 前缀 + 描述性名称
- 使用 AAA 模式：Arrange, Act, Assert

✅ **单元测试示例**:
```rust
#[cfg(test)]
mod tests {
    use super::*;
    use dioxus::prelude::*;

    #[test]
    fn test_button_renders_with_default_props() {
        // Arrange
        let mut dom = VirtualDom::new(|| {
            rsx! {
                Button {
                    "Click me"
                }
            }
        });

        // Act
        let _ = dom.rebuild();

        // Assert
        let html = dioxus_ssr::render(&dom);
        assert!(html.contains("ant-btn"));
        assert!(html.contains("Click me"));
        assert!(!html.contains("ant-btn-primary")); // 默认不是主按钮
    }

    #[test]
    fn test_button_applies_primary_type() {
        // Arrange
        let mut dom = VirtualDom::new(|| {
            rsx! {
                Button {
                    button_type: ButtonType::Primary,
                    "Primary Button"
                }
            }
        });

        // Act
        let _ = dom.rebuild();

        // Assert
        let html = dioxus_ssr::render(&dom);
        assert!(html.contains("ant-btn-primary"));
    }

    #[test]
    fn test_button_handles_disabled_state() {
        // Arrange
        let mut dom = VirtualDom::new(|| {
            rsx! {
                Button {
                    disabled: true,
                    "Disabled Button"
                }
            }
        });

        // Act
        let _ = dom.rebuild();

        // Assert
        let html = dioxus_ssr::render(&dom);
        assert!(html.contains("disabled"));
        assert!(html.contains("ant-btn-disabled"));
    }

    #[test]
    fn test_button_click_event() {
        use std::sync::{Arc, Mutex};

        // Arrange
        let clicked = Arc::new(Mutex::new(false));
        let clicked_clone = clicked.clone();

        let mut dom = VirtualDom::new(move || {
            let clicked = clicked_clone.clone();
            rsx! {
                Button {
                    onclick: move |_| {
                        *clicked.lock().unwrap() = true;
                    },
                    "Click me"
                }
            }
        });

        // Act
        let _ = dom.rebuild();
        // 模拟点击事件
        // dom.handle_event("click", ...); // 具体实现依赖于测试框架

        // Assert
        // assert!(*clicked.lock().unwrap());
    }
}
```

### 组件测试规范
- 测试组件的渲染输出
- 测试组件的交互行为
- 测试组件的状态变化
- 测试组件的属性传递

✅ **组件测试示例**:
```rust
#[cfg(test)]
mod component_tests {
    use super::*;
    use dioxus_testing::*;

    #[tokio::test]
    async fn test_input_component_basic_functionality() {
        let mut dom = VirtualDom::new(|| {
            rsx! {
                Input {
                    placeholder: "Enter text",
                    value: "initial value"
                }
            }
        });

        let _ = dom.rebuild();
        let html = dioxus_ssr::render(&dom);

        // 测试基本渲染
        assert!(html.contains("ant-input"));
        assert!(html.contains("placeholder=\"Enter text\""));
        assert!(html.contains("value=\"initial value\""));
    }

    #[tokio::test]
    async fn test_form_validation() {
        let mut dom = VirtualDom::new(|| {
            rsx! {
                Form {
                    FormItem {
                        label: "Username",
                        required: true,
                        Input {
                            placeholder: "Enter username"
                        }
                    }
                }
            }
        });

        let _ = dom.rebuild();
        let html = dioxus_ssr::render(&dom);

        // 测试表单结构
        assert!(html.contains("ant-form"));
        assert!(html.contains("ant-form-item"));
        assert!(html.contains("ant-form-item-required"));
    }
}
```

### 主题测试规范
- 测试主题切换功能
- 测试设计令牌的正确性
- 测试 CSS 变量生成

✅ **主题测试示例**:
```rust
#[cfg(test)]
mod theme_tests {
    use super::*;
    use crate::theme::*;

    #[test]
    fn test_light_theme_tokens() {
        let token = light_theme();

        // 测试基本颜色
        assert_eq!(token.color_primary, "#1677ff");
        assert_eq!(token.color_text_base, "#000000");
        assert_eq!(token.color_bg_base, "#ffffff");

        // 测试派生颜色存在
        assert!(!token.color_primary_hover.is_empty());
        assert!(!token.color_primary_active.is_empty());
    }

    #[test]
    fn test_dark_theme_tokens() {
        let token = dark_theme();

        // 测试暗色主题特定值
        assert_eq!(token.color_text_base, "#ffffff");
        assert_eq!(token.color_bg_base, "#000000");

        // 确保主色保持一致
        assert_eq!(token.color_primary, "#1677ff");
    }

    #[test]
    fn test_css_variables_generation() {
        let token = light_theme();
        let css_vars = generate_css_variables(&token);

        // 测试关键 CSS 变量
        assert!(css_vars.contains("--ant-color-primary: #1677ff"));
        assert!(css_vars.contains("--ant-color-text:"));
        assert!(css_vars.contains("--ant-color-bg-container:"));
    }

    #[test]
    fn test_custom_theme_creation() {
        let config = CustomThemeConfig {
            name: "test-theme".to_string(),
            base_theme: "light".to_string(),
            overrides: {
                let mut map = std::collections::HashMap::new();
                map.insert("color_primary".to_string(), serde_json::Value::String("#ff0000".to_string()));
                map
            },
        };

        let custom_token = create_custom_theme(config).unwrap();
        assert_eq!(custom_token.color_primary, "#ff0000");
    }
}
```

### 性能测试规范
- 测试组件渲染性能
- 测试内存使用情况
- 测试 WebAssembly 包大小

✅ **性能测试示例**:
```rust
#[cfg(test)]
mod performance_tests {
    use super::*;
    use std::time::Instant;

    #[test]
    fn test_button_render_performance() {
        let start = Instant::now();

        // 渲染大量按钮
        for _ in 0..1000 {
            let mut dom = VirtualDom::new(|| {
                rsx! {
                    Button {
                        button_type: ButtonType::Primary,
                        "Test Button"
                    }
                }
            });
            let _ = dom.rebuild();
        }

        let duration = start.elapsed();

        // 确保渲染时间在合理范围内
        assert!(duration.as_millis() < 1000, "Button rendering too slow: {:?}", duration);
    }

    #[test]
    fn test_theme_switching_performance() {
        let start = Instant::now();

        // 模拟主题切换
        for _ in 0..100 {
            let _light = light_theme();
            let _dark = dark_theme();
            let _compact = compact_theme();
        }

        let duration = start.elapsed();
        assert!(duration.as_millis() < 100, "Theme switching too slow: {:?}", duration);
    }
}
```

### 集成测试规范
- 测试组件间的交互
- 测试完整的用户流程
- 测试跨浏览器兼容性

✅ **集成测试示例**:
```rust
// tests/integration_tests.rs
use ant_design_dioxus::prelude::*;
use dioxus::prelude::*;

#[tokio::test]
async fn test_form_submission_flow() {
    let mut dom = VirtualDom::new(|| {
        rsx! {
            Form {
                FormItem {
                    label: "Username",
                    Input {
                        placeholder: "Enter username"
                    }
                }
                FormItem {
                    label: "Password",
                    Input {
                        r#type: "password",
                        placeholder: "Enter password"
                    }
                }
                FormItem {
                    Button {
                        button_type: ButtonType::Primary,
                        html_type: ButtonHtmlType::Submit,
                        "Submit"
                    }
                }
            }
        }
    });

    let _ = dom.rebuild();
    let html = dioxus_ssr::render(&dom);

    // 验证完整表单结构
    assert!(html.contains("ant-form"));
    assert!(html.contains("type=\"password\""));
    assert!(html.contains("type=\"submit\""));
}

#[tokio::test]
async fn test_modal_interaction() {
    let mut dom = VirtualDom::new(|| {
        let mut visible = use_signal(|| false);

        rsx! {
            div {
                Button {
                    onclick: move |_| visible.set(true),
                    "Open Modal"
                }

                Modal {
                    open: visible(),
                    title: "Test Modal",
                    oncancel: move |_| visible.set(false),

                    p { "Modal content" }
                }
            }
        }
    });

    let _ = dom.rebuild();
    let html = dioxus_ssr::render(&dom);

    // 初始状态：模态框不可见
    assert!(!html.contains("ant-modal-mask"));
}
```

### 测试工具和辅助函数
- 提供测试辅助函数
- 创建测试数据生成器
- 实现测试断言宏

✅ **测试工具示例**:
```rust
// src/testing/mod.rs
#[cfg(test)]
pub mod test_utils {
    use super::*;

    /// 创建测试用的虚拟 DOM
    pub fn create_test_dom<P: 'static>(component: fn() -> Element) -> VirtualDom {
        VirtualDom::new(component)
    }

    /// 渲染组件并返回 HTML
    pub fn render_component(mut dom: VirtualDom) -> String {
        let _ = dom.rebuild();
        dioxus_ssr::render(&dom)
    }

    /// 断言 HTML 包含特定类名
    pub fn assert_has_class(html: &str, class_name: &str) {
        assert!(
            html.contains(&format!("class=\"{}\"", class_name)) ||
            html.contains(&format!("class=\"{}\s", class_name)) ||
            html.contains(&format!("\s{}\"", class_name)),
            "HTML does not contain class '{}': {}",
            class_name,
            html
        );
    }

    /// 生成测试用的主题令牌
    pub fn create_test_token() -> AliasToken {
        light_theme()
    }

    /// 模拟用户交互事件
    pub struct MockEvent {
        pub event_type: String,
        pub target: String,
    }

    impl MockEvent {
        pub fn click(target: &str) -> Self {
            Self {
                event_type: "click".to_string(),
                target: target.to_string(),
            }
        }
    }
}

/// 测试断言宏
#[macro_export]
macro_rules! assert_component_renders {
    ($component:expr, $expected_class:expr) => {
        let mut dom = create_test_dom(|| $component);
        let html = render_component(dom);
        assert_has_class(&html, $expected_class);
    };
}
```

### 测试命令和脚本
- 提供标准化的测试命令
- 集成代码覆盖率报告
- 支持不同环境的测试

✅ **测试脚本示例**:
```bash
#!/bin/bash
# scripts/test.sh

set -e

echo "Running Rust tests..."
cargo test --lib --bins

echo "Running component tests..."
cargo test --test '*'

echo "Running example tests..."
cargo check --examples

echo "Generating coverage report..."
cargo tarpaulin --out Html --output-dir coverage

echo "Running WebAssembly tests..."
wasm-pack test --headless --firefox

echo "All tests passed!"
```

## 例外情况
- 实验性功能可以有较低的测试覆盖率
- 性能关键代码可以跳过某些测试
- 第三方集成测试可能需要特殊配置
