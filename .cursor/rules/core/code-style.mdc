---
description: Rust代码风格和格式化规范，确保代码一致性和可读性
globs:
  - 'src/**/*.rs'
  - 'examples/**/*.rs'
  - 'tests/**/*.rs'
  - 'benches/**/*.rs'
alwaysApply: true
priority: high
---

# Rust 代码风格规范

## 目标
确保 Ant Design Dioxus 项目中所有 Rust 代码遵循统一的风格规范，提高代码可读性和维护性。

## 上下文
- 基于 Rust 官方风格指南和 rustfmt 配置
- 适配 Dioxus 0.6.3 框架的最佳实践
- 遵循 Ant Design 设计系统的命名约定
- 支持 WebAssembly 目标的优化

## 规则

### 格式化
- 使用 `rustfmt` 进行代码格式化
- 行长度限制为 100 字符
- 使用 4 个空格缩进，不使用制表符
- 函数参数过长时换行对齐

✅ **正确示例**:
```rust
pub fn create_button_component(
    button_type: ButtonType,
    size: ButtonSize,
    disabled: bool,
) -> Element {
    // 实现
}
```

❌ **避免**:
```rust
pub fn create_button_component(button_type: ButtonType, size: ButtonSize, disabled: bool) -> Element {
    // 过长的单行
}
```

### 导入规范
- 按以下顺序组织导入：标准库、第三方库、本地模块
- 使用 `use` 语句时保持简洁
- 避免使用 `use *` 除非在 prelude 模块中

✅ **正确示例**:
```rust
use std::collections::HashMap;
use std::fmt;

use dioxus::prelude::*;
use serde::{Deserialize, Serialize};

use crate::theme::Theme;
use crate::utils::class_names;
```

### 错误处理
- 优先使用 `Result<T, E>` 而不是 `panic!`
- 在组件中使用适当的错误边界
- 提供有意义的错误消息

✅ **正确示例**:
```rust
fn parse_date(input: &str) -> Result<Date, DateParseError> {
    // 实现
}
```

### 注释规范
- 使用 `///` 为公共 API 编写文档注释
- 使用 `//` 为内部实现添加解释性注释
- 文档注释应包含示例代码

✅ **正确示例**:
```rust
/// 创建一个按钮组件
///
/// # 参数
///
/// * `button_type` - 按钮类型
/// * `children` - 按钮内容
///
/// # 示例
///
/// ```rust
/// rsx! {
///     Button {
///         button_type: ButtonType::Primary,
///         "点击我"
///     }
/// }
/// ```
pub fn Button(props: ButtonProps) -> Element {
    // 实现
}
```

## 例外情况
- 生成的代码文件可以不遵循某些格式规范
- 第三方库的重新导出可以使用不同的命名约定
- 性能关键代码可以适当放宽可读性要求
