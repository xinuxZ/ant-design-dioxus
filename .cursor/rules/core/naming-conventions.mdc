---
description: 命名规范，确保项目中所有标识符遵循一致的命名约定
globs:
  - 'src/**/*.rs'
  - 'examples/**/*.rs'
  - 'tests/**/*.rs'
alwaysApply: true
priority: high
---

# 命名规范

## 目标
建立统一的命名约定，提高代码可读性和团队协作效率，确保与 Ant Design 设计系统保持一致。

## 上下文
- 遵循 Rust 官方命名约定 (RFC 430)
- 适配 Ant Design 组件命名规范
- 支持 Dioxus 框架的组件开发模式
- 考虑国际化和本地化需求

## 规则

### 组件命名
- 组件函数使用 **PascalCase**（大驼峰命名法）
- 组件文件夹使用 **snake_case**（下划线命名法）
- Props 结构体以组件名 + "Props" 结尾

✅ **正确示例**:
```rust
// 文件: src/components/date_picker/mod.rs
#[derive(Props, Clone, PartialEq)]
pub struct DatePickerProps {
    // 属性定义
}

#[component]
pub fn DatePicker(props: DatePickerProps) -> Element {
    // 组件实现
}
```

❌ **避免**:
```rust
// 错误的命名
pub fn datePicker() -> Element { } // 应该是 PascalCase
pub struct DatePickerProperties { } // 应该以 Props 结尾
```

### 属性命名
- 组件属性使用 **snake_case**
- 布尔属性使用描述性名称，避免否定形式
- 事件处理器以 "on" 开头

✅ **正确示例**:
```rust
#[derive(Props, Clone, PartialEq)]
pub struct ButtonProps {
    pub button_type: ButtonType,
    pub size: ButtonSize,
    pub disabled: bool,        // 而不是 enabled
    pub loading: bool,         // 而不是 not_loading
    pub onclick: Option<EventHandler<MouseEvent>>,
}
```

### 枚举和常量
- 枚举类型使用 **PascalCase**
- 枚举变体使用 **PascalCase**
- 常量使用 **SCREAMING_SNAKE_CASE**

✅ **正确示例**:
```rust
#[derive(Debug, Clone, Copy, PartialEq)]
pub enum ButtonType {
    Primary,
    Default,
    Dashed,
    Text,
    Link,
}

const DEFAULT_BUTTON_SIZE: &str = "middle";
const MAX_UPLOAD_SIZE: usize = 1024 * 1024 * 10; // 10MB
```

### 函数和方法
- 公共函数使用 **snake_case**
- 内部辅助函数使用 **snake_case**
- 构造函数使用 `new`、`with_*`、`from_*` 模式

✅ **正确示例**:
```rust
impl ButtonStyle {
    pub fn new() -> Self { }
    pub fn with_type(button_type: ButtonType) -> Self { }
    pub fn from_theme(theme: &Theme) -> Self { }

    fn calculate_padding(&self) -> String { }
    fn generate_css_class(&self) -> String { }
}
```

### 模块和文件
- 模块名使用 **snake_case**
- 文件名使用 **snake_case**
- 避免使用 Rust 关键字作为模块名

✅ **正确示例**:
```
src/
├── components/
│   ├── date_picker/
│   ├── input_number/
│   └── auto_complete/
├── theme/
│   ├── ant_design/
│   └── css_bridge/
└── utils/
    ├── class_names.rs
    └── responsive.rs
```

### CSS 类名和样式
- CSS 类名使用 **kebab-case**（短横线命名法）
- 遵循 BEM 命名约定：`block__element--modifier`
- 使用 Ant Design 的类名前缀 `ant-`

✅ **正确示例**:
```rust
let class_name = format!(
    "ant-btn ant-btn--{} {}",
    button_type.to_string().to_lowercase(),
    if disabled { "ant-btn--disabled" } else { "" }
);
```

### 主题和设计令牌
- 主题变量使用 **snake_case**
- CSS 自定义属性使用 **kebab-case**
- 颜色名称使用语义化命名

✅ **正确示例**:
```rust
pub struct ColorTokens {
    pub primary_color: String,
    pub success_color: String,
    pub warning_color: String,
    pub error_color: String,
    pub text_color_primary: String,
    pub text_color_secondary: String,
}
```

### 国际化键名
- 使用点分隔的层级结构
- 使用 **camelCase** 或 **snake_case**
- 保持键名简洁且具有描述性

✅ **正确示例**:
```rust
// 国际化键名
"button.confirm"
"datePicker.placeholder"
"form.validation.required"
"table.pagination.total"
```

## 例外情况
- 与外部 API 交互时可以保持原有命名风格
- 第三方库的重新导出保持原始命名
- 某些约定俗成的缩写可以使用（如 `id`、`url`、`html`）
