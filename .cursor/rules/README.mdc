---
description: Cursor Rules Architecture Overview for ant-design-dioxus
globs:
  - '**/*'
alwaysApply: true
priority: highest
---

# Cursor Rules Architecture - ant-design-dioxus

## Overview

This document provides a comprehensive overview of the Cursor rules architecture for the ant-design-dioxus project. The rules are organized into a hierarchical structure that covers all aspects of development, from core coding standards to deployment practices.

## Architecture Structure

```
.cursor/rules/
├── README.mdc                 # This overview document
├── core/                      # Cross-cutting development rules
│   ├── code-style.mdc        # Rust code formatting and style
│   ├── naming-conventions.mdc # Naming standards across the project
│   └── project-structure.mdc  # File organization and structure
├── dioxus/                    # Dioxus framework-specific rules
│   └── component-development.mdc # Component development guidelines
├── ant-design/                # Ant Design system rules
│   ├── design-system.mdc     # Design system compliance
│   └── theme-system.mdc      # Theme implementation standards
├── quality/                   # Quality assurance rules
│   ├── testing.mdc           # Testing standards and practices
│   ├── security.mdc          # Security best practices
│   └── performance.mdc       # Performance optimization
├── deployment/                # CI/CD and deployment rules
│   └── ci-cd.mdc             # Continuous integration workflows
└── legacy/                    # Migrated legacy rules
    ├── component-guide.mdc   # Legacy component guide
    ├── project-structure.mdc # Legacy project structure
    └── theme-guide.mdc       # Legacy theme guide
```

## Rule Categories

### 🔧 Core Rules
**Priority**: Highest | **Scope**: All files

Fundamental development standards that apply across the entire codebase:
- **Code Style**: Rust formatting, linting, and code organization
- **Naming Conventions**: Consistent naming across components, files, and APIs
- **Project Structure**: Directory organization and file management

### ⚛️ Technology Rules
**Priority**: High | **Scope**: Framework-specific files

Framework and technology-specific guidelines:
- **Dioxus Development**: Component creation, RSX syntax, state management
- **Rust Ecosystem**: Cargo configuration, dependency management

### 🎨 Design System Rules
**Priority**: High | **Scope**: UI components and themes

Ant Design system compliance and implementation:
- **Design System**: Component API design, design tokens, accessibility
- **Theme System**: Theme provider, CSS variables, customization

### 🛡️ Quality Rules
**Priority**: Medium-High | **Scope**: All code

Quality assurance and best practices:
- **Testing**: Unit tests, component tests, integration tests
- **Security**: Input validation, XSS prevention, dependency security
- **Performance**: Rendering optimization, memory management, bundle size

### 🚀 Deployment Rules
**Priority**: Medium | **Scope**: CI/CD and infrastructure

Deployment and infrastructure standards:
- **CI/CD**: GitHub Actions workflows, release processes
- **Environment**: Configuration management, deployment scripts

## Rule Application

### Priority System
1. **Highest**: Core rules that must always be followed
2. **High**: Technology and design system rules
3. **Medium-High**: Quality assurance rules
4. **Medium**: Deployment and infrastructure rules
5. **Low**: Legacy rules (deprecated)

### Glob Patterns
Each rule file specifies which files it applies to using glob patterns:
- `**/*` - All files
- `src/**/*.rs` - Rust source files
- `src/components/**/*` - Component files
- `examples/**/*` - Example files
- `.github/**/*` - CI/CD files

## Usage Guidelines

### For Developers
1. **Start with Core Rules**: Always follow code style and naming conventions
2. **Apply Technology Rules**: Use Dioxus-specific guidelines for components
3. **Follow Design System**: Ensure Ant Design compliance
4. **Maintain Quality**: Write tests and follow security practices

### For Code Reviews
1. Check compliance with core rules first
2. Verify design system adherence
3. Ensure adequate test coverage
4. Review security implications

### For New Contributors
1. Read this overview document
2. Focus on core and technology rules initially
3. Gradually learn design system and quality rules
4. Refer to examples in the codebase

## Migration Notes

### Legacy Rules
The following legacy rules have been migrated to the new structure:
- `component-guide.mdc` → `dioxus/component-development.mdc` + `ant-design/design-system.mdc`
- `project-structure.mdc` → `core/project-structure.mdc`
- `theme-guide.mdc` → `ant-design/theme-system.mdc`

### Breaking Changes
- Legacy rules are marked as deprecated
- New rules have updated glob patterns
- Priority system has been restructured

## Maintenance

### Adding New Rules
1. Determine the appropriate category
2. Follow the standardized rule format
3. Set appropriate glob patterns and priority
4. Update this overview document

### Updating Existing Rules
1. Maintain backward compatibility when possible
2. Update version information
3. Document changes in the rule file
4. Notify the team of significant changes

## Support

For questions about these rules:
1. Check the specific rule documentation
2. Review examples in the codebase
3. Consult with the team leads
4. Create an issue for clarification

---

**Generated**: Cursor Rules Architecture for ant-design-dioxus
**Version**: 1.0.0
**Last Updated**: 2024
