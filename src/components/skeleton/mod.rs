//! # Skeleton È™®Êû∂Â±èÁªÑ‰ª∂
//!
//! Âú®ÂÜÖÂÆπÂä†ËΩΩÊó∂ÊòæÁ§∫Âç†‰ΩçÁ¨¶ÔºåÊèê‰æõÊõ¥Â•ΩÁöÑÁî®Êà∑‰ΩìÈ™å„ÄÇ
//! ÂΩìÁªÑ‰ª∂ÂåÖÂê´Â§ßÈáè‰ø°ÊÅØÔºàÂ¶ÇÂàóË°®ÊàñÂç°ÁâáÔºâÊó∂ÁâπÂà´ÊúâÁî®Ôºå‰ªÖÂú®È¶ñÊ¨°Âä†ËΩΩÊï∞ÊçÆÊó∂Â∑•‰Ωú„ÄÇ
//!
//! ## ÁâπÊÄß
//!
//! - üé≠ **Â§öÁßçÂç†‰ΩçÁ¨¶**: ÊîØÊåÅÂ§¥ÂÉè„ÄÅÊ†áÈ¢ò„ÄÅÊÆµËêΩÁ≠âÂ§öÁßçÂç†‰ΩçÁ¨¶Á±ªÂûã
//! - üé® **Âä®ÁîªÊïàÊûú**: ÂÜÖÁΩÆÊ≥¢Êµ™Âä®ÁîªÂíåÈó™ÁÉÅÊïàÊûú
//! - üéØ **Â≠êÁªÑ‰ª∂**: Êèê‰æõ Button„ÄÅInput„ÄÅImage Á≠â‰∏ìÁî®È™®Êû∂Â±è
//! - üé™ **Ëá™ÈÄÇÂ∫î**: Ê†πÊçÆÂÜÖÂÆπËá™Âä®Ë∞ÉÊï¥Â∏ÉÂ±ÄÂíåÊ†∑Âºè
//! - üé® **‰∏ªÈ¢òÊîØÊåÅ**: ÂÆåÊï¥ÁöÑ Design Token Âíå‰∏ªÈ¢òÂÆöÂà∂
//! - üì± **ÂìçÂ∫îÂºè**: ÊîØÊåÅ‰∏çÂêåÂ±èÂπïÂ∞∫ÂØ∏ÁöÑÈÄÇÈÖç
//!
//! ## ‰ΩøÁî®Á§∫‰æã
//!
//! ### Âü∫Á°ÄÁî®Ê≥ï
//!
//! ```rust
//! use dioxus::prelude::*;
//! use ant_design_dioxus::Skeleton;
//!
//! #[component]
//! fn App() -> Element {
//!     let loading = use_signal(|| true);
//!
//!     rsx! {
//!         Skeleton {
//!             loading: loading(),
//!             active: true,
//!             "ÂÜÖÂÆπÂä†ËΩΩÂÆåÊàêÂêéÊòæÁ§∫"
//!         }
//!     }
//! }
//! ```
//!
//! ### Â∏¶Â§¥ÂÉèÁöÑÈ™®Êû∂Â±è
//!
//! ```rust
//! use dioxus::prelude::*;
//! use ant_design_dioxus::{Skeleton, SkeletonAvatarConfig, SkeletonAvatarProps, AvatarShape, AvatarSize};
//!
//! #[component]
//! fn App() -> Element {
//!     rsx! {
//!         Skeleton {
//!             loading: true,
//!             avatar: SkeletonAvatarConfig::Config(SkeletonAvatarProps {
//!                 shape: Some(AvatarShape::Circle),
//!                 size: Some(AvatarSize::Large),
//!                 active: Some(true),
//!             }),
//!             paragraph: SkeletonParagraphConfig::Config(SkeletonParagraphProps {
//!                 rows: Some(3),
//!                 width: None,
//!             }),
//!         }
//!     }
//! }
//! ```
//!
//! ### Â≠êÁªÑ‰ª∂‰ΩøÁî®
//!
//! ```rust
//! use dioxus::prelude::*;
//! use ant_design_dioxus::{SkeletonButton, SkeletonInput, SkeletonImage};
//!
//! #[component]
//! fn App() -> Element {
//!     rsx! {
//!         div {
//!             SkeletonButton {
//!                 active: true,
//!                 size: Some(ButtonSize::Large),
//!             }
//!             SkeletonInput {
//!                 active: true,
//!                 size: Some(InputSize::Default),
//!             }
//!             SkeletonImage {
//!                 active: true,
//!             }
//!         }
//!     }
//! }
//! ```

mod component;
mod styles;
mod types;
mod utils;

// ÈáçÊñ∞ÂØºÂá∫‰∏ªË¶ÅÁªÑ‰ª∂ÂíåÁ±ªÂûã
pub use component::{Skeleton, SkeletonButton, SkeletonImage, SkeletonInput};

pub use types::{
    AvatarShape as SkeletonAvatarShape, AvatarSize as SkeletonAvatarSize,
    ButtonShape as SkeletonButtonShape, ButtonSize as SkeletonButtonSize,
    InputSize as SkeletonInputSize, SkeletonAvatarConfig, SkeletonAvatarProps, SkeletonButtonProps,
    SkeletonImageProps, SkeletonInputProps, SkeletonParagraphConfig, SkeletonParagraphProps,
    SkeletonProps, SkeletonTheme, SkeletonTitleConfig, SkeletonTitleProps, SkeletonWidth,
    SkeletonWidthConfig,
};

pub use styles::{
    generate_skeleton_animation, generate_skeleton_avatar_style, generate_skeleton_button_style,
    generate_skeleton_image_style, generate_skeleton_input_style,
    generate_skeleton_paragraph_style, generate_skeleton_style, generate_skeleton_title_style,
    get_skeleton_class_name,
};

pub use utils::{
    calculate_avatar_props, calculate_paragraph_props, calculate_title_props,
    generate_paragraph_widths, validate_skeleton_config,
};
